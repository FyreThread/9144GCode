#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
controller Controller1 = controller(primary);
motor intake = motor(PORT5, ratio18_1, false);

motor kicker = motor(PORT20, ratio36_1, false);

motor kicker2 = motor(PORT11, ratio18_1, false);

motor leftMotorA = motor(PORT1, ratio18_1, true);
motor leftMotorB = motor(PORT2, ratio18_1, true);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT9, ratio18_1, false);
motor rightMotorB = motor(PORT10, ratio18_1, false);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 299.24, 419.09999999999997, 292.09999999999997, mm, 1.3333333333333333);

digital_out lift = digital_out(Brain.ThreeWirePort.A);
digital_out Rightb = digital_out(Brain.ThreeWirePort.B);
digital_out leftb = digital_out(Brain.ThreeWirePort.C);
digital_out frontwing = digital_out(Brain.ThreeWirePort.D);



// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool DrivetrainNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1
int rc_auto_loop_function_Controller1() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis3 + Axis4
      // right = Axis3 - Axis4
      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();
      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();
      
      // check if the values are inside of the deadband range
      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {
        // check if the motors have already been stopped
        if (DrivetrainNeedsToBeStopped_Controller1) {
          // stop the drive motors
          LeftDriveSmart.stop();
          RightDriveSmart.stop();
          // tell the code that the motors have been stopped
          DrivetrainNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range
        DrivetrainNeedsToBeStopped_Controller1 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainNeedsToBeStopped_Controller1) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainNeedsToBeStopped_Controller1) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);

#pragma endregion VEXcode Generated Robot Configuration


/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/


// Include the V5 Library
#include "vex.h"


// Allows for easier use of the VEX Library
using namespace vex;
void Fintake(){
 intake.spin(forward);
}
void spinPewPew(){
 kicker.spin(forward);
 kicker2.spin(reverse);
}
void Rwing(){
 Rightb.set(true);
}
void Lwing(){
 leftb.set(true);
}
void Fwing(){
 frontwing.set(true);
}
void Drwing(){
 Rightb.set(false);
}
void Dlwing(){
 leftb.set(false);
}
void Dfwing(){
 frontwing.set(false);
}
void Rintake(){
 intake.spin(reverse);
}
void Stopin(){
 intake.stop();
}
void StopPewPew(){
 kicker.stop();
 kicker2.stop();
}
void LiftExtend() {
  Lift.set(true);
  Lift2.set(true);
}
void LiftRetract() {
  Lift.set(false);
  Lift2.set(false);
}

void Autoclose(){
Drivetrain.setDriveVelocity(100, percent);
Drivetrain.setTurnVelocity(70, percent);
Drivetrain.driveFor(reverse, 27, inches);
Drivetrain.turnFor(right, 18, degrees);
Drivetrain.setTimeout( 1, seconds);
Drivetrain.driveFor(reverse, 20, inches);
Drivetrain.driveFor(forward, 5, inches);
Drivetrain.setTimeout( 1, seconds);
Drivetrain.driveFor(reverse, 10, inches);
Drivetrain.driveFor(forward, 14, inches);
Drivetrain.turnFor(right, 73, degrees);
leftb.set(true);
wait(1, seconds);
Drivetrain.driveFor(reverse, 13, inches);
Drivetrain.turnFor(left, 18, degrees);
wait(1, seconds);
leftb.set(false);
Drivetrain.turnFor(right, 4, degrees);
Drivetrain.driveFor(reverse, 25, inches);
Drivetrain.driveFor(reverse, 16, inches);
Drivetrain.driveFor(reverse, 1, inches);



}






competition Competition;


int main() {
 intake.setVelocity(100, percent);
 kicker.setVelocity(100, percent);
 kicker2.setVelocity(100, percent);
 Drivetrain.setDriveVelocity(70, percent);


 Competition.autonomous(Autoclose);
 Controller1.ButtonY.pressed(LiftExtend);
 Controller1.ButtonX.pressed(LiftRetract);
 Controller1.ButtonR2.pressed(Rintake);
 Controller1.ButtonR2.released(Stopin);
 Controller1.ButtonL2.pressed(Fintake);
 Controller1.ButtonL2.released(Stopin);
 Controller1.ButtonA.pressed(spinPewPew);
 Controller1.ButtonA.released(StopPewPew);
 Controller1.ButtonR1.pressed(Rwing);
 Controller1.ButtonL1.pressed(Lwing);
 Controller1.ButtonUp.pressed(Fwing);
 Controller1.ButtonLeft.pressed(Drwing);
 Controller1.ButtonLeft.pressed(Dlwing);
 Controller1.ButtonLeft.pressed(Dfwing);


}
