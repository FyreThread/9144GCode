#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>

#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;

// START V5 MACROS
#define waitUntil(condition) \
    do                       \
    {                        \
        wait(5, msec);       \
    } while (!(condition))

#define repeat(iterations) \
    for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS

// Robot configuration code.

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName)
{
    printf("VEXPlaySound:%s\n", soundName);
    wait(5, msec);
}

#pragma endregion VEXcode Generated Robot Configuration

controller Controller1 = controller(primary);
motor Intake = motor(PORT14, ratio18_1, false);

motor kicker = motor(PORT9, ratio36_1, false);

motor kicker2 = motor(PORT19, ratio18_1, false);

motor leftMotorA = motor(PORT11, ratio18_1, true);
motor leftMotorB = motor(PORT12, ratio18_1, true);
motor leftMotorC = motor(PORT20, ratio18_1, true);
motor leftMotorD = motor(PORT13, ratio18_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB, leftMotorC, leftMotorD);
motor rightMotorA = motor(PORT1, ratio18_1, false);
motor rightMotorB = motor(PORT2, ratio18_1, false);
motor rightMotorC = motor(PORT10, ratio18_1, false);
motor rightMotorD = motor(PORT3, ratio18_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB, rightMotorC, rightMotorD);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 219.44, 419.09999999999997, 292.09999999999997, mm, 2);
digital_out Rightb = digital_out(Brain.ThreeWirePort.A);
digital_out leftb = digital_out(Brain.ThreeWirePort.G);
digital_out frontwing = digital_out(Brain.ThreeWirePort.H);
digital_out Lift = digital_out(Brain.ThreeWirePort.B);
digital_out Lift2 = digital_out(Brain.ThreeWirePort.C);

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"

// Allows for easier use of the VEX Library
using namespace vex;

// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool Controller1RightShoulderControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1
int rc_auto_loop_function_Controller1()
{
    // process the controller input every 20 milliseconds
    // update the motors based on the input values
    while (true)
    {
        if (RemoteControlCodeEnabled)
        {
            // calculate the drivetrain motor velocities from the controller joystick axies
            // left = Axis3 + Axis1
            // right = Axis3 - Axis1
            int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position() + Controller1.Axis4.position();
            int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position() - Controller1.Axis4.position();

            // check if the value is inside of the deadband range
            if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5)
            {
                // check if the left motor has already been stopped
                if (DrivetrainLNeedsToBeStopped_Controller1)
                {
                    // stop the left drive motor
                    LeftDriveSmart.stop();
                    // tell the code that the left motor has been stopped
                    DrivetrainLNeedsToBeStopped_Controller1 = false;
                }
            }
            else
            {
                // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
                DrivetrainLNeedsToBeStopped_Controller1 = true;
            }
            // check if the value is inside of the deadband range
            if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5)
            {
                // check if the right motor has already been stopped
                if (DrivetrainRNeedsToBeStopped_Controller1)
                {
                    // stop the right drive motor
                    RightDriveSmart.stop();
                    // tell the code that the right motor has been stopped
                    DrivetrainRNeedsToBeStopped_Controller1 = false;
                }
            }
            else
            {
                // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
                DrivetrainRNeedsToBeStopped_Controller1 = true;
            }

            // only tell the left drive motor to spin if the values are not in the deadband range
            if (DrivetrainLNeedsToBeStopped_Controller1)
            {
                LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
                LeftDriveSmart.spin(forward);
            }
            // only tell the right drive motor to spin if the values are not in the deadband range
            if (DrivetrainRNeedsToBeStopped_Controller1)
            {
                RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
                RightDriveSmart.spin(forward);
            }
        }
        // wait before repeating the process
        wait(20, msec);
    }
    return 0;
}

task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);

void FIntake()
{
    Intake.spin(forward);
}
void spinPewPew()
{
    kicker.spin(forward);
    kicker2.spin(reverse);
}
void Rwing()
{
    Rightb.set(true);
}
void Lwing()
{
    leftb.set(true);
}
void Fwing()
{
    frontwing.set(true);
}
void Drwing()
{
    Rightb.set(false);
}
void Dlwing()
{
    leftb.set(false);
}
void Dfwing()
{
    frontwing.set(false);
}
void RIntake()
{
    Intake.spin(reverse);
}
void Stopin()
{
    Intake.stop();
}
void StopPewPew()
{
    kicker.stop();
    kicker2.stop();
}
void LiftExtend()
{
    Lift.set(true);
    Lift2.set(true);
}
void LiftRetract()
{
    Lift.set(false);
    Lift2.set(false);
}
double iSwear45 = 22.5;
// Autonomous Function
void Autoclose()
{
    Drivetrain.setDriveVelocity(100, percent);
    Drivetrain.setTurnVelocity(70, percent);
    kicker.setVelocity(100, percent);
    kicker2.setVelocity(100, percent);
    Drivetrain.driveFor(reverse, 25, inches);
    Drivetrain.turnFor(right, 25, degrees);
    Drivetrain.setTimeout(1, seconds);
    Drivetrain.driveFor(reverse, 20, inches);
    Drivetrain.driveFor(forward, 13, inches);
    Drivetrain.turnFor(left, 55, degrees);
    Drivetrain.driveFor(reverse, .5, inches);
    Rightb.set(true);
    wait(250, msec);
    Drivetrain.turnFor(left, 3, degrees);
    Drivetrain.setTimeout(31, seconds);
    kicker.spin(forward);
    kicker2.spin(reverse);
    wait(30, seconds);                                  // 28 for real
    kicker.stop();
    kicker2.stop();
    Rightb.set(false);
    Drivetrain.setDriveVelocity(150, percent);
    Drivetrain.turnFor(left, 60, degrees);
    Drivetrain.driveFor(reverse, 28, inches);
    Drivetrain.turnFor(left, 27.5, degrees);
    Drivetrain.driveFor(reverse, 70, inches);          // Alley
    Drivetrain.turnFor(left, 20, degrees);             // Align with bar?
    Drivetrain.driveFor(reverse, 35, inches);
    Drivetrain.turnFor(left, 35, degrees);
    Drivetrain.setTimeout(1, seconds);
    Drivetrain.driveFor(reverse, 15, inches);
    Drivetrain.driveFor(forward, 5, inches);
    Drivetrain.turnFor(left, 45, degrees);
    Drivetrain.driveFor(reverse, 40, inches);
    Drivetrain.turnFor(right, 50, degrees);
    Drivetrain.driveFor(reverse, 30, inches);
    Drivetrain.turnFor(right, 50, degrees);
    leftb.set(true);
    Rightb.set(true);
    Drivetrain.driveFor(reverse, 30, inches);
    leftb.set(false);
    Rightb.set(false);
    Drivetrain.driveFor(forward, 30, inches);
    Drivetrain.turnFor(right, 50, degrees);
    Drivetrain.driveFor(forward, 25, inches);
    Drivetrain.turnFor(left, 45, degrees);
    leftb.set(true);
    Rightb.set(true);
    Drivetrain.driveFor(reverse, 35, inches);


    /*Drivetrain.driveFor(reverse, 25, inches);
    Drivetrain.turnFor(left, 18, degrees);
    leftb.set(true);
    Drivetrain.setTimeout(1, seconds);
    Drivetrain.driveFor(reverse, 20, inches);
    Drivetrain.driveFor(forward, 10, inches);
    Drivetrain.driveFor(reverse, 11, inches);
    Rightb.set(false);
    Drivetrain.turnFor(left, 45, degrees);
    Drivetrain.driveFor(reverse, 30, inches);
    Drivetrain.turnFor(right, 45, degrees);
    Drivetrain.driveFor(reverse, 20, inches);
    Drivetrain.turnFor(right, 45, degrees);
    Rightb.set(true);
    leftb.set(true);
    Drivetrain.setTimeout(1, seconds);
    Drivetrain.driveFor(reverse, 40, inches);*/
}

// Create Competition Instance
competition Competition;

int main()
{
    Intake.setVelocity(100, percent);
    kicker.setVelocity(100, percent);
    kicker2.setVelocity(100, percent);
    Drivetrain.setDriveVelocity(150, percent);
    Drivetrain.setTurnVelocity(60, percent);

    Competition.autonomous(Autoclose);
    Drivetrain.setTurnVelocity(60, percent);
    Controller1.ButtonY.pressed(LiftExtend);
    Controller1.ButtonX.pressed(LiftRetract);
    Controller1.ButtonR2.pressed(RIntake);
    Controller1.ButtonR2.released(Stopin);
    Controller1.ButtonL2.pressed(FIntake);
    Controller1.ButtonL2.released(Stopin);
    Controller1.ButtonA.pressed(spinPewPew);
    Controller1.ButtonA.released(StopPewPew);
    Controller1.ButtonR1.pressed(Rwing);
    Controller1.ButtonL1.pressed(Lwing);
    Controller1.ButtonUp.pressed(Fwing);
    Controller1.ButtonLeft.pressed(Drwing);
    Controller1.ButtonLeft.pressed(Dlwing);
    Controller1.ButtonLeft.pressed(Dfwing);
}
